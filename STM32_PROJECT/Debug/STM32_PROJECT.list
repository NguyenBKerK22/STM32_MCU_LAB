
STM32_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ae4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001bf0  08001bf0  00002bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c14  08001c14  00003018  2**0
                  CONTENTS
  4 .ARM          00000000  08001c14  08001c14  00003018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c14  08001c14  00003018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c14  08001c14  00002c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c18  08001c18  00002c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08001c1c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000018  08001c34  00003018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08001c34  0000303c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000029cb  00000000  00000000  00003041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e9b  00000000  00000000  00005a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000400  00000000  00000000  000068a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002e1  00000000  00000000  00006ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000156d8  00000000  00000000  00006f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004b1b  00000000  00000000  0001c661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079e1b  00000000  00000000  0002117c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009af97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dec  00000000  00000000  0009afdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0009bdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08001bd8 	.word	0x08001bd8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08001bd8 	.word	0x08001bd8

0800014c <init_exercise5>:
/* USER CODE BEGIN 0 */
int stateOfGroup1 = RED;
int countOfGroup1 = 5;
int stateOfGroup2 = GREEN;
int countOfGroup2 = 3;
void init_exercise5(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_GPIO_Port,LED_1_Pin,SET);
 8000150:	2201      	movs	r2, #1
 8000152:	2101      	movs	r1, #1
 8000154:	4840      	ldr	r0, [pc, #256]	@ (8000258 <init_exercise5+0x10c>)
 8000156:	f001 f903 	bl	8001360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port,LED_2_Pin,SET);
 800015a:	2201      	movs	r2, #1
 800015c:	2102      	movs	r1, #2
 800015e:	483e      	ldr	r0, [pc, #248]	@ (8000258 <init_exercise5+0x10c>)
 8000160:	f001 f8fe 	bl	8001360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port,LED_3_Pin,SET);
 8000164:	2201      	movs	r2, #1
 8000166:	2104      	movs	r1, #4
 8000168:	483b      	ldr	r0, [pc, #236]	@ (8000258 <init_exercise5+0x10c>)
 800016a:	f001 f8f9 	bl	8001360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port,LED_4_Pin,SET);
 800016e:	2201      	movs	r2, #1
 8000170:	2108      	movs	r1, #8
 8000172:	4839      	ldr	r0, [pc, #228]	@ (8000258 <init_exercise5+0x10c>)
 8000174:	f001 f8f4 	bl	8001360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_5_GPIO_Port,LED_5_Pin,SET);
 8000178:	2201      	movs	r2, #1
 800017a:	2110      	movs	r1, #16
 800017c:	4836      	ldr	r0, [pc, #216]	@ (8000258 <init_exercise5+0x10c>)
 800017e:	f001 f8ef 	bl	8001360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_6_GPIO_Port,LED_6_Pin,SET);
 8000182:	2201      	movs	r2, #1
 8000184:	2120      	movs	r1, #32
 8000186:	4834      	ldr	r0, [pc, #208]	@ (8000258 <init_exercise5+0x10c>)
 8000188:	f001 f8ea 	bl	8001360 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_0_GPIO_Port,SEG_0_Pin,RESET); //a
 800018c:	2200      	movs	r2, #0
 800018e:	2180      	movs	r1, #128	@ 0x80
 8000190:	4832      	ldr	r0, [pc, #200]	@ (800025c <init_exercise5+0x110>)
 8000192:	f001 f8e5 	bl	8001360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_1_GPIO_Port,SEG_1_Pin,RESET); //b
 8000196:	2200      	movs	r2, #0
 8000198:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800019c:	482f      	ldr	r0, [pc, #188]	@ (800025c <init_exercise5+0x110>)
 800019e:	f001 f8df 	bl	8001360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_2_GPIO_Port,SEG_2_Pin,RESET);//c
 80001a2:	2200      	movs	r2, #0
 80001a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001a8:	482c      	ldr	r0, [pc, #176]	@ (800025c <init_exercise5+0x110>)
 80001aa:	f001 f8d9 	bl	8001360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_3_GPIO_Port,SEG_3_Pin,RESET);//d
 80001ae:	2200      	movs	r2, #0
 80001b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001b4:	4829      	ldr	r0, [pc, #164]	@ (800025c <init_exercise5+0x110>)
 80001b6:	f001 f8d3 	bl	8001360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_4_GPIO_Port,SEG_4_Pin,RESET); //e
 80001ba:	2200      	movs	r2, #0
 80001bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001c0:	4826      	ldr	r0, [pc, #152]	@ (800025c <init_exercise5+0x110>)
 80001c2:	f001 f8cd 	bl	8001360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_5_GPIO_Port,SEG_5_Pin,RESET); //f
 80001c6:	2200      	movs	r2, #0
 80001c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001cc:	4823      	ldr	r0, [pc, #140]	@ (800025c <init_exercise5+0x110>)
 80001ce:	f001 f8c7 	bl	8001360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_6_GPIO_Port,SEG_6_Pin,RESET); //g
 80001d2:	2200      	movs	r2, #0
 80001d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001d8:	4820      	ldr	r0, [pc, #128]	@ (800025c <init_exercise5+0x110>)
 80001da:	f001 f8c1 	bl	8001360 <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(LED_1_GPIO_Port,LED_1_Pin);
 80001de:	2101      	movs	r1, #1
 80001e0:	481d      	ldr	r0, [pc, #116]	@ (8000258 <init_exercise5+0x10c>)
 80001e2:	f001 f8d5 	bl	8001390 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_2_GPIO_Port,LED_2_Pin);
 80001e6:	2102      	movs	r1, #2
 80001e8:	481b      	ldr	r0, [pc, #108]	@ (8000258 <init_exercise5+0x10c>)
 80001ea:	f001 f8d1 	bl	8001390 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_3_GPIO_Port,LED_3_Pin);
 80001ee:	2104      	movs	r1, #4
 80001f0:	4819      	ldr	r0, [pc, #100]	@ (8000258 <init_exercise5+0x10c>)
 80001f2:	f001 f8cd 	bl	8001390 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_4_GPIO_Port,LED_4_Pin);
 80001f6:	2108      	movs	r1, #8
 80001f8:	4817      	ldr	r0, [pc, #92]	@ (8000258 <init_exercise5+0x10c>)
 80001fa:	f001 f8c9 	bl	8001390 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_5_GPIO_Port,LED_5_Pin);
 80001fe:	2110      	movs	r1, #16
 8000200:	4815      	ldr	r0, [pc, #84]	@ (8000258 <init_exercise5+0x10c>)
 8000202:	f001 f8c5 	bl	8001390 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_6_GPIO_Port,LED_6_Pin);
 8000206:	2120      	movs	r1, #32
 8000208:	4813      	ldr	r0, [pc, #76]	@ (8000258 <init_exercise5+0x10c>)
 800020a:	f001 f8c1 	bl	8001390 <HAL_GPIO_TogglePin>

	HAL_GPIO_TogglePin(SEG_0_GPIO_Port,SEG_0_Pin); //a
 800020e:	2180      	movs	r1, #128	@ 0x80
 8000210:	4812      	ldr	r0, [pc, #72]	@ (800025c <init_exercise5+0x110>)
 8000212:	f001 f8bd 	bl	8001390 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(SEG_1_GPIO_Port,SEG_1_Pin); //b
 8000216:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800021a:	4810      	ldr	r0, [pc, #64]	@ (800025c <init_exercise5+0x110>)
 800021c:	f001 f8b8 	bl	8001390 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(SEG_2_GPIO_Port,SEG_2_Pin);//c
 8000220:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000224:	480d      	ldr	r0, [pc, #52]	@ (800025c <init_exercise5+0x110>)
 8000226:	f001 f8b3 	bl	8001390 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(SEG_3_GPIO_Port,SEG_3_Pin);//d
 800022a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800022e:	480b      	ldr	r0, [pc, #44]	@ (800025c <init_exercise5+0x110>)
 8000230:	f001 f8ae 	bl	8001390 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(SEG_4_GPIO_Port,SEG_4_Pin); //e
 8000234:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000238:	4808      	ldr	r0, [pc, #32]	@ (800025c <init_exercise5+0x110>)
 800023a:	f001 f8a9 	bl	8001390 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(SEG_5_GPIO_Port,SEG_5_Pin); //f
 800023e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000242:	4806      	ldr	r0, [pc, #24]	@ (800025c <init_exercise5+0x110>)
 8000244:	f001 f8a4 	bl	8001390 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(SEG_6_GPIO_Port,SEG_6_Pin); //g
 8000248:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800024c:	4803      	ldr	r0, [pc, #12]	@ (800025c <init_exercise5+0x110>)
 800024e:	f001 f89f 	bl	8001390 <HAL_GPIO_TogglePin>
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40010c00 	.word	0x40010c00
 800025c:	40010800 	.word	0x40010800

08000260 <display7SEG>:
void display7SEG(int num){
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	switch(num){
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2b09      	cmp	r3, #9
 800026c:	f200 81bc 	bhi.w	80005e8 <display7SEG+0x388>
 8000270:	a201      	add	r2, pc, #4	@ (adr r2, 8000278 <display7SEG+0x18>)
 8000272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000276:	bf00      	nop
 8000278:	080002a1 	.word	0x080002a1
 800027c:	080002f5 	.word	0x080002f5
 8000280:	08000349 	.word	0x08000349
 8000284:	0800039d 	.word	0x0800039d
 8000288:	080003f1 	.word	0x080003f1
 800028c:	08000445 	.word	0x08000445
 8000290:	08000499 	.word	0x08000499
 8000294:	080004ed 	.word	0x080004ed
 8000298:	08000541 	.word	0x08000541
 800029c:	08000595 	.word	0x08000595
		case 0:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port,SEG_0_Pin,RESET); //a
 80002a0:	2200      	movs	r2, #0
 80002a2:	2180      	movs	r1, #128	@ 0x80
 80002a4:	48d2      	ldr	r0, [pc, #840]	@ (80005f0 <display7SEG+0x390>)
 80002a6:	f001 f85b 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port,SEG_1_Pin,RESET); //b
 80002aa:	2200      	movs	r2, #0
 80002ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002b0:	48cf      	ldr	r0, [pc, #828]	@ (80005f0 <display7SEG+0x390>)
 80002b2:	f001 f855 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port,SEG_2_Pin,RESET);//c
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002bc:	48cc      	ldr	r0, [pc, #816]	@ (80005f0 <display7SEG+0x390>)
 80002be:	f001 f84f 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port,SEG_3_Pin,RESET);//d
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002c8:	48c9      	ldr	r0, [pc, #804]	@ (80005f0 <display7SEG+0x390>)
 80002ca:	f001 f849 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port,SEG_4_Pin,RESET); //e
 80002ce:	2200      	movs	r2, #0
 80002d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002d4:	48c6      	ldr	r0, [pc, #792]	@ (80005f0 <display7SEG+0x390>)
 80002d6:	f001 f843 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port,SEG_5_Pin,RESET); //f
 80002da:	2200      	movs	r2, #0
 80002dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002e0:	48c3      	ldr	r0, [pc, #780]	@ (80005f0 <display7SEG+0x390>)
 80002e2:	f001 f83d 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port,SEG_6_Pin,SET); //g
 80002e6:	2201      	movs	r2, #1
 80002e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002ec:	48c0      	ldr	r0, [pc, #768]	@ (80005f0 <display7SEG+0x390>)
 80002ee:	f001 f837 	bl	8001360 <HAL_GPIO_WritePin>
			break;
 80002f2:	e179      	b.n	80005e8 <display7SEG+0x388>
		case 1:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port,SEG_0_Pin,SET); //a
 80002f4:	2201      	movs	r2, #1
 80002f6:	2180      	movs	r1, #128	@ 0x80
 80002f8:	48bd      	ldr	r0, [pc, #756]	@ (80005f0 <display7SEG+0x390>)
 80002fa:	f001 f831 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port,SEG_1_Pin,RESET); //b
 80002fe:	2200      	movs	r2, #0
 8000300:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000304:	48ba      	ldr	r0, [pc, #744]	@ (80005f0 <display7SEG+0x390>)
 8000306:	f001 f82b 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port,SEG_2_Pin,RESET);//c
 800030a:	2200      	movs	r2, #0
 800030c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000310:	48b7      	ldr	r0, [pc, #732]	@ (80005f0 <display7SEG+0x390>)
 8000312:	f001 f825 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port,SEG_3_Pin,SET);//d
 8000316:	2201      	movs	r2, #1
 8000318:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800031c:	48b4      	ldr	r0, [pc, #720]	@ (80005f0 <display7SEG+0x390>)
 800031e:	f001 f81f 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port,SEG_4_Pin,SET); //e
 8000322:	2201      	movs	r2, #1
 8000324:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000328:	48b1      	ldr	r0, [pc, #708]	@ (80005f0 <display7SEG+0x390>)
 800032a:	f001 f819 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port,SEG_5_Pin,SET); //f
 800032e:	2201      	movs	r2, #1
 8000330:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000334:	48ae      	ldr	r0, [pc, #696]	@ (80005f0 <display7SEG+0x390>)
 8000336:	f001 f813 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port,SEG_6_Pin,SET); //g
 800033a:	2201      	movs	r2, #1
 800033c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000340:	48ab      	ldr	r0, [pc, #684]	@ (80005f0 <display7SEG+0x390>)
 8000342:	f001 f80d 	bl	8001360 <HAL_GPIO_WritePin>
				break;
 8000346:	e14f      	b.n	80005e8 <display7SEG+0x388>
		case 2:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port,SEG_0_Pin,RESET); //a
 8000348:	2200      	movs	r2, #0
 800034a:	2180      	movs	r1, #128	@ 0x80
 800034c:	48a8      	ldr	r0, [pc, #672]	@ (80005f0 <display7SEG+0x390>)
 800034e:	f001 f807 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port,SEG_1_Pin,RESET); //b
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000358:	48a5      	ldr	r0, [pc, #660]	@ (80005f0 <display7SEG+0x390>)
 800035a:	f001 f801 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port,SEG_2_Pin,SET);//c
 800035e:	2201      	movs	r2, #1
 8000360:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000364:	48a2      	ldr	r0, [pc, #648]	@ (80005f0 <display7SEG+0x390>)
 8000366:	f000 fffb 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port,SEG_3_Pin,RESET);//d
 800036a:	2200      	movs	r2, #0
 800036c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000370:	489f      	ldr	r0, [pc, #636]	@ (80005f0 <display7SEG+0x390>)
 8000372:	f000 fff5 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port,SEG_4_Pin,RESET); //e
 8000376:	2200      	movs	r2, #0
 8000378:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800037c:	489c      	ldr	r0, [pc, #624]	@ (80005f0 <display7SEG+0x390>)
 800037e:	f000 ffef 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port,SEG_5_Pin,SET); //f
 8000382:	2201      	movs	r2, #1
 8000384:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000388:	4899      	ldr	r0, [pc, #612]	@ (80005f0 <display7SEG+0x390>)
 800038a:	f000 ffe9 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port,SEG_6_Pin,RESET); //g
 800038e:	2200      	movs	r2, #0
 8000390:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000394:	4896      	ldr	r0, [pc, #600]	@ (80005f0 <display7SEG+0x390>)
 8000396:	f000 ffe3 	bl	8001360 <HAL_GPIO_WritePin>
				break;
 800039a:	e125      	b.n	80005e8 <display7SEG+0x388>
		case 3:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port,SEG_0_Pin,RESET); //a
 800039c:	2200      	movs	r2, #0
 800039e:	2180      	movs	r1, #128	@ 0x80
 80003a0:	4893      	ldr	r0, [pc, #588]	@ (80005f0 <display7SEG+0x390>)
 80003a2:	f000 ffdd 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port,SEG_1_Pin,RESET); //b
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003ac:	4890      	ldr	r0, [pc, #576]	@ (80005f0 <display7SEG+0x390>)
 80003ae:	f000 ffd7 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port,SEG_2_Pin,RESET);//c
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003b8:	488d      	ldr	r0, [pc, #564]	@ (80005f0 <display7SEG+0x390>)
 80003ba:	f000 ffd1 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port,SEG_3_Pin,RESET);//d
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003c4:	488a      	ldr	r0, [pc, #552]	@ (80005f0 <display7SEG+0x390>)
 80003c6:	f000 ffcb 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port,SEG_4_Pin,SET); //e
 80003ca:	2201      	movs	r2, #1
 80003cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003d0:	4887      	ldr	r0, [pc, #540]	@ (80005f0 <display7SEG+0x390>)
 80003d2:	f000 ffc5 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port,SEG_5_Pin,SET); //f
 80003d6:	2201      	movs	r2, #1
 80003d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003dc:	4884      	ldr	r0, [pc, #528]	@ (80005f0 <display7SEG+0x390>)
 80003de:	f000 ffbf 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port,SEG_6_Pin,RESET); //g
 80003e2:	2200      	movs	r2, #0
 80003e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003e8:	4881      	ldr	r0, [pc, #516]	@ (80005f0 <display7SEG+0x390>)
 80003ea:	f000 ffb9 	bl	8001360 <HAL_GPIO_WritePin>
				break;
 80003ee:	e0fb      	b.n	80005e8 <display7SEG+0x388>
		case 4:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port,SEG_0_Pin,SET); //a
 80003f0:	2201      	movs	r2, #1
 80003f2:	2180      	movs	r1, #128	@ 0x80
 80003f4:	487e      	ldr	r0, [pc, #504]	@ (80005f0 <display7SEG+0x390>)
 80003f6:	f000 ffb3 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port,SEG_1_Pin,RESET); //b
 80003fa:	2200      	movs	r2, #0
 80003fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000400:	487b      	ldr	r0, [pc, #492]	@ (80005f0 <display7SEG+0x390>)
 8000402:	f000 ffad 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port,SEG_2_Pin,RESET);//c
 8000406:	2200      	movs	r2, #0
 8000408:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800040c:	4878      	ldr	r0, [pc, #480]	@ (80005f0 <display7SEG+0x390>)
 800040e:	f000 ffa7 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port,SEG_3_Pin,SET);//d
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000418:	4875      	ldr	r0, [pc, #468]	@ (80005f0 <display7SEG+0x390>)
 800041a:	f000 ffa1 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port,SEG_4_Pin,SET); //e
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000424:	4872      	ldr	r0, [pc, #456]	@ (80005f0 <display7SEG+0x390>)
 8000426:	f000 ff9b 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port,SEG_5_Pin,RESET); //f
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000430:	486f      	ldr	r0, [pc, #444]	@ (80005f0 <display7SEG+0x390>)
 8000432:	f000 ff95 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port,SEG_6_Pin,RESET); //g
 8000436:	2200      	movs	r2, #0
 8000438:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800043c:	486c      	ldr	r0, [pc, #432]	@ (80005f0 <display7SEG+0x390>)
 800043e:	f000 ff8f 	bl	8001360 <HAL_GPIO_WritePin>
				break;
 8000442:	e0d1      	b.n	80005e8 <display7SEG+0x388>
		case 5:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port,SEG_0_Pin,RESET); //a
 8000444:	2200      	movs	r2, #0
 8000446:	2180      	movs	r1, #128	@ 0x80
 8000448:	4869      	ldr	r0, [pc, #420]	@ (80005f0 <display7SEG+0x390>)
 800044a:	f000 ff89 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port,SEG_1_Pin,SET); //b
 800044e:	2201      	movs	r2, #1
 8000450:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000454:	4866      	ldr	r0, [pc, #408]	@ (80005f0 <display7SEG+0x390>)
 8000456:	f000 ff83 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port,SEG_2_Pin,RESET);//c
 800045a:	2200      	movs	r2, #0
 800045c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000460:	4863      	ldr	r0, [pc, #396]	@ (80005f0 <display7SEG+0x390>)
 8000462:	f000 ff7d 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port,SEG_3_Pin,RESET);//d
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800046c:	4860      	ldr	r0, [pc, #384]	@ (80005f0 <display7SEG+0x390>)
 800046e:	f000 ff77 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port,SEG_4_Pin,SET); //e
 8000472:	2201      	movs	r2, #1
 8000474:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000478:	485d      	ldr	r0, [pc, #372]	@ (80005f0 <display7SEG+0x390>)
 800047a:	f000 ff71 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port,SEG_5_Pin,RESET); //f
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000484:	485a      	ldr	r0, [pc, #360]	@ (80005f0 <display7SEG+0x390>)
 8000486:	f000 ff6b 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port,SEG_6_Pin,RESET); //g
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000490:	4857      	ldr	r0, [pc, #348]	@ (80005f0 <display7SEG+0x390>)
 8000492:	f000 ff65 	bl	8001360 <HAL_GPIO_WritePin>
				break;
 8000496:	e0a7      	b.n	80005e8 <display7SEG+0x388>
		case 6:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port,SEG_0_Pin,RESET); //a
 8000498:	2200      	movs	r2, #0
 800049a:	2180      	movs	r1, #128	@ 0x80
 800049c:	4854      	ldr	r0, [pc, #336]	@ (80005f0 <display7SEG+0x390>)
 800049e:	f000 ff5f 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port,SEG_1_Pin,SET); //b
 80004a2:	2201      	movs	r2, #1
 80004a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004a8:	4851      	ldr	r0, [pc, #324]	@ (80005f0 <display7SEG+0x390>)
 80004aa:	f000 ff59 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port,SEG_2_Pin,RESET);//c
 80004ae:	2200      	movs	r2, #0
 80004b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004b4:	484e      	ldr	r0, [pc, #312]	@ (80005f0 <display7SEG+0x390>)
 80004b6:	f000 ff53 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port,SEG_3_Pin,RESET);//d
 80004ba:	2200      	movs	r2, #0
 80004bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004c0:	484b      	ldr	r0, [pc, #300]	@ (80005f0 <display7SEG+0x390>)
 80004c2:	f000 ff4d 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port,SEG_4_Pin,RESET); //e
 80004c6:	2200      	movs	r2, #0
 80004c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004cc:	4848      	ldr	r0, [pc, #288]	@ (80005f0 <display7SEG+0x390>)
 80004ce:	f000 ff47 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port,SEG_5_Pin,RESET); //f
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004d8:	4845      	ldr	r0, [pc, #276]	@ (80005f0 <display7SEG+0x390>)
 80004da:	f000 ff41 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port,SEG_6_Pin,RESET); //g
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004e4:	4842      	ldr	r0, [pc, #264]	@ (80005f0 <display7SEG+0x390>)
 80004e6:	f000 ff3b 	bl	8001360 <HAL_GPIO_WritePin>
			break;
 80004ea:	e07d      	b.n	80005e8 <display7SEG+0x388>
		case 7:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port,SEG_0_Pin,RESET); //a
 80004ec:	2200      	movs	r2, #0
 80004ee:	2180      	movs	r1, #128	@ 0x80
 80004f0:	483f      	ldr	r0, [pc, #252]	@ (80005f0 <display7SEG+0x390>)
 80004f2:	f000 ff35 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port,SEG_1_Pin,RESET); //b
 80004f6:	2200      	movs	r2, #0
 80004f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004fc:	483c      	ldr	r0, [pc, #240]	@ (80005f0 <display7SEG+0x390>)
 80004fe:	f000 ff2f 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port,SEG_2_Pin,RESET);//c
 8000502:	2200      	movs	r2, #0
 8000504:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000508:	4839      	ldr	r0, [pc, #228]	@ (80005f0 <display7SEG+0x390>)
 800050a:	f000 ff29 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port,SEG_3_Pin,SET);//d
 800050e:	2201      	movs	r2, #1
 8000510:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000514:	4836      	ldr	r0, [pc, #216]	@ (80005f0 <display7SEG+0x390>)
 8000516:	f000 ff23 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port,SEG_4_Pin,SET); //e
 800051a:	2201      	movs	r2, #1
 800051c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000520:	4833      	ldr	r0, [pc, #204]	@ (80005f0 <display7SEG+0x390>)
 8000522:	f000 ff1d 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port,SEG_5_Pin,SET); //f
 8000526:	2201      	movs	r2, #1
 8000528:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800052c:	4830      	ldr	r0, [pc, #192]	@ (80005f0 <display7SEG+0x390>)
 800052e:	f000 ff17 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port,SEG_6_Pin,SET); //g
 8000532:	2201      	movs	r2, #1
 8000534:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000538:	482d      	ldr	r0, [pc, #180]	@ (80005f0 <display7SEG+0x390>)
 800053a:	f000 ff11 	bl	8001360 <HAL_GPIO_WritePin>
				break;
 800053e:	e053      	b.n	80005e8 <display7SEG+0x388>
		case 8:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port,SEG_0_Pin,RESET); //a
 8000540:	2200      	movs	r2, #0
 8000542:	2180      	movs	r1, #128	@ 0x80
 8000544:	482a      	ldr	r0, [pc, #168]	@ (80005f0 <display7SEG+0x390>)
 8000546:	f000 ff0b 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port,SEG_1_Pin,RESET); //b
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000550:	4827      	ldr	r0, [pc, #156]	@ (80005f0 <display7SEG+0x390>)
 8000552:	f000 ff05 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port,SEG_2_Pin,RESET);//c
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800055c:	4824      	ldr	r0, [pc, #144]	@ (80005f0 <display7SEG+0x390>)
 800055e:	f000 feff 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port,SEG_3_Pin,RESET);//d
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000568:	4821      	ldr	r0, [pc, #132]	@ (80005f0 <display7SEG+0x390>)
 800056a:	f000 fef9 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port,SEG_4_Pin,RESET); //e
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000574:	481e      	ldr	r0, [pc, #120]	@ (80005f0 <display7SEG+0x390>)
 8000576:	f000 fef3 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port,SEG_5_Pin,RESET); //f
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000580:	481b      	ldr	r0, [pc, #108]	@ (80005f0 <display7SEG+0x390>)
 8000582:	f000 feed 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port,SEG_6_Pin,RESET); //g
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800058c:	4818      	ldr	r0, [pc, #96]	@ (80005f0 <display7SEG+0x390>)
 800058e:	f000 fee7 	bl	8001360 <HAL_GPIO_WritePin>
				break;
 8000592:	e029      	b.n	80005e8 <display7SEG+0x388>
		case 9:
			HAL_GPIO_WritePin(SEG_0_GPIO_Port,SEG_0_Pin,RESET); //a
 8000594:	2200      	movs	r2, #0
 8000596:	2180      	movs	r1, #128	@ 0x80
 8000598:	4815      	ldr	r0, [pc, #84]	@ (80005f0 <display7SEG+0x390>)
 800059a:	f000 fee1 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_1_GPIO_Port,SEG_1_Pin,RESET); //b
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005a4:	4812      	ldr	r0, [pc, #72]	@ (80005f0 <display7SEG+0x390>)
 80005a6:	f000 fedb 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_GPIO_Port,SEG_2_Pin,RESET);//c
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005b0:	480f      	ldr	r0, [pc, #60]	@ (80005f0 <display7SEG+0x390>)
 80005b2:	f000 fed5 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_3_GPIO_Port,SEG_3_Pin,RESET);//d
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005bc:	480c      	ldr	r0, [pc, #48]	@ (80005f0 <display7SEG+0x390>)
 80005be:	f000 fecf 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_4_GPIO_Port,SEG_4_Pin,SET); //e
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005c8:	4809      	ldr	r0, [pc, #36]	@ (80005f0 <display7SEG+0x390>)
 80005ca:	f000 fec9 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_5_GPIO_Port,SEG_5_Pin,RESET); //f
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005d4:	4806      	ldr	r0, [pc, #24]	@ (80005f0 <display7SEG+0x390>)
 80005d6:	f000 fec3 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_6_GPIO_Port,SEG_6_Pin,RESET); //g
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005e0:	4803      	ldr	r0, [pc, #12]	@ (80005f0 <display7SEG+0x390>)
 80005e2:	f000 febd 	bl	8001360 <HAL_GPIO_WritePin>
				break;
 80005e6:	bf00      	nop
		}
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40010800 	.word	0x40010800

080005f4 <display7SEG2>:
void display7SEG2(int num){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	switch(num){
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b09      	cmp	r3, #9
 8000600:	f200 81a8 	bhi.w	8000954 <display7SEG2+0x360>
 8000604:	a201      	add	r2, pc, #4	@ (adr r2, 800060c <display7SEG2+0x18>)
 8000606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060a:	bf00      	nop
 800060c:	08000635 	.word	0x08000635
 8000610:	08000685 	.word	0x08000685
 8000614:	080006d5 	.word	0x080006d5
 8000618:	08000725 	.word	0x08000725
 800061c:	08000775 	.word	0x08000775
 8000620:	080007c5 	.word	0x080007c5
 8000624:	08000815 	.word	0x08000815
 8000628:	08000865 	.word	0x08000865
 800062c:	080008b5 	.word	0x080008b5
 8000630:	08000905 	.word	0x08000905
		case 0:
			HAL_GPIO_WritePin(SEG_2_0_GPIO_Port,SEG_2_0_Pin,RESET); //a
 8000634:	2200      	movs	r2, #0
 8000636:	2102      	movs	r1, #2
 8000638:	48c8      	ldr	r0, [pc, #800]	@ (800095c <display7SEG2+0x368>)
 800063a:	f000 fe91 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_1_GPIO_Port,SEG_2_1_Pin,RESET); //b
 800063e:	2200      	movs	r2, #0
 8000640:	2104      	movs	r1, #4
 8000642:	48c6      	ldr	r0, [pc, #792]	@ (800095c <display7SEG2+0x368>)
 8000644:	f000 fe8c 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_2_GPIO_Port,SEG_2_2_Pin,RESET);//c
 8000648:	2200      	movs	r2, #0
 800064a:	2108      	movs	r1, #8
 800064c:	48c3      	ldr	r0, [pc, #780]	@ (800095c <display7SEG2+0x368>)
 800064e:	f000 fe87 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_3_GPIO_Port,SEG_2_3_Pin,RESET);//d
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000658:	48c1      	ldr	r0, [pc, #772]	@ (8000960 <display7SEG2+0x36c>)
 800065a:	f000 fe81 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_4_GPIO_Port,SEG_2_4_Pin,RESET); //e
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000664:	48be      	ldr	r0, [pc, #760]	@ (8000960 <display7SEG2+0x36c>)
 8000666:	f000 fe7b 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_5_GPIO_Port,SEG_2_5_Pin,RESET); //f
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000670:	48bb      	ldr	r0, [pc, #748]	@ (8000960 <display7SEG2+0x36c>)
 8000672:	f000 fe75 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_6_GPIO_Port,SEG_2_6_Pin,SET); //g
 8000676:	2201      	movs	r2, #1
 8000678:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800067c:	48b8      	ldr	r0, [pc, #736]	@ (8000960 <display7SEG2+0x36c>)
 800067e:	f000 fe6f 	bl	8001360 <HAL_GPIO_WritePin>
			break;
 8000682:	e167      	b.n	8000954 <display7SEG2+0x360>
		case 1:
			HAL_GPIO_WritePin(SEG_2_0_GPIO_Port,SEG_2_0_Pin,SET); //a
 8000684:	2201      	movs	r2, #1
 8000686:	2102      	movs	r1, #2
 8000688:	48b4      	ldr	r0, [pc, #720]	@ (800095c <display7SEG2+0x368>)
 800068a:	f000 fe69 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_1_GPIO_Port,SEG_2_1_Pin,RESET); //b
 800068e:	2200      	movs	r2, #0
 8000690:	2104      	movs	r1, #4
 8000692:	48b2      	ldr	r0, [pc, #712]	@ (800095c <display7SEG2+0x368>)
 8000694:	f000 fe64 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_2_GPIO_Port,SEG_2_2_Pin,RESET);//c
 8000698:	2200      	movs	r2, #0
 800069a:	2108      	movs	r1, #8
 800069c:	48af      	ldr	r0, [pc, #700]	@ (800095c <display7SEG2+0x368>)
 800069e:	f000 fe5f 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_3_GPIO_Port,SEG_2_3_Pin,SET);//d
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006a8:	48ad      	ldr	r0, [pc, #692]	@ (8000960 <display7SEG2+0x36c>)
 80006aa:	f000 fe59 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_4_GPIO_Port,SEG_2_4_Pin,SET); //e
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006b4:	48aa      	ldr	r0, [pc, #680]	@ (8000960 <display7SEG2+0x36c>)
 80006b6:	f000 fe53 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_5_GPIO_Port,SEG_2_5_Pin,SET); //f
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006c0:	48a7      	ldr	r0, [pc, #668]	@ (8000960 <display7SEG2+0x36c>)
 80006c2:	f000 fe4d 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_6_GPIO_Port,SEG_2_6_Pin,SET); //g
 80006c6:	2201      	movs	r2, #1
 80006c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006cc:	48a4      	ldr	r0, [pc, #656]	@ (8000960 <display7SEG2+0x36c>)
 80006ce:	f000 fe47 	bl	8001360 <HAL_GPIO_WritePin>
				break;
 80006d2:	e13f      	b.n	8000954 <display7SEG2+0x360>
		case 2:
			HAL_GPIO_WritePin(SEG_2_0_GPIO_Port,SEG_2_0_Pin,RESET); //a
 80006d4:	2200      	movs	r2, #0
 80006d6:	2102      	movs	r1, #2
 80006d8:	48a0      	ldr	r0, [pc, #640]	@ (800095c <display7SEG2+0x368>)
 80006da:	f000 fe41 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_1_GPIO_Port,SEG_2_1_Pin,RESET); //b
 80006de:	2200      	movs	r2, #0
 80006e0:	2104      	movs	r1, #4
 80006e2:	489e      	ldr	r0, [pc, #632]	@ (800095c <display7SEG2+0x368>)
 80006e4:	f000 fe3c 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_2_GPIO_Port,SEG_2_2_Pin,SET);//c
 80006e8:	2201      	movs	r2, #1
 80006ea:	2108      	movs	r1, #8
 80006ec:	489b      	ldr	r0, [pc, #620]	@ (800095c <display7SEG2+0x368>)
 80006ee:	f000 fe37 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_3_GPIO_Port,SEG_2_3_Pin,RESET);//d
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f8:	4899      	ldr	r0, [pc, #612]	@ (8000960 <display7SEG2+0x36c>)
 80006fa:	f000 fe31 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_4_GPIO_Port,SEG_2_4_Pin,RESET); //e
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000704:	4896      	ldr	r0, [pc, #600]	@ (8000960 <display7SEG2+0x36c>)
 8000706:	f000 fe2b 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_5_GPIO_Port,SEG_2_5_Pin,SET); //f
 800070a:	2201      	movs	r2, #1
 800070c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000710:	4893      	ldr	r0, [pc, #588]	@ (8000960 <display7SEG2+0x36c>)
 8000712:	f000 fe25 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_6_GPIO_Port,SEG_2_6_Pin,RESET); //g
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800071c:	4890      	ldr	r0, [pc, #576]	@ (8000960 <display7SEG2+0x36c>)
 800071e:	f000 fe1f 	bl	8001360 <HAL_GPIO_WritePin>
				break;
 8000722:	e117      	b.n	8000954 <display7SEG2+0x360>
		case 3:
			HAL_GPIO_WritePin(SEG_2_0_GPIO_Port,SEG_2_0_Pin,RESET); //a
 8000724:	2200      	movs	r2, #0
 8000726:	2102      	movs	r1, #2
 8000728:	488c      	ldr	r0, [pc, #560]	@ (800095c <display7SEG2+0x368>)
 800072a:	f000 fe19 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_1_GPIO_Port,SEG_2_1_Pin,RESET); //b
 800072e:	2200      	movs	r2, #0
 8000730:	2104      	movs	r1, #4
 8000732:	488a      	ldr	r0, [pc, #552]	@ (800095c <display7SEG2+0x368>)
 8000734:	f000 fe14 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_2_GPIO_Port,SEG_2_2_Pin,RESET);//c
 8000738:	2200      	movs	r2, #0
 800073a:	2108      	movs	r1, #8
 800073c:	4887      	ldr	r0, [pc, #540]	@ (800095c <display7SEG2+0x368>)
 800073e:	f000 fe0f 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_3_GPIO_Port,SEG_2_3_Pin,RESET);//d
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000748:	4885      	ldr	r0, [pc, #532]	@ (8000960 <display7SEG2+0x36c>)
 800074a:	f000 fe09 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_4_GPIO_Port,SEG_2_4_Pin,SET); //e
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000754:	4882      	ldr	r0, [pc, #520]	@ (8000960 <display7SEG2+0x36c>)
 8000756:	f000 fe03 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_5_GPIO_Port,SEG_2_5_Pin,SET); //f
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000760:	487f      	ldr	r0, [pc, #508]	@ (8000960 <display7SEG2+0x36c>)
 8000762:	f000 fdfd 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_6_GPIO_Port,SEG_2_6_Pin,RESET); //g
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800076c:	487c      	ldr	r0, [pc, #496]	@ (8000960 <display7SEG2+0x36c>)
 800076e:	f000 fdf7 	bl	8001360 <HAL_GPIO_WritePin>
				break;
 8000772:	e0ef      	b.n	8000954 <display7SEG2+0x360>
		case 4:
			HAL_GPIO_WritePin(SEG_2_0_GPIO_Port,SEG_2_0_Pin,SET); //a
 8000774:	2201      	movs	r2, #1
 8000776:	2102      	movs	r1, #2
 8000778:	4878      	ldr	r0, [pc, #480]	@ (800095c <display7SEG2+0x368>)
 800077a:	f000 fdf1 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_1_GPIO_Port,SEG_2_1_Pin,RESET); //b
 800077e:	2200      	movs	r2, #0
 8000780:	2104      	movs	r1, #4
 8000782:	4876      	ldr	r0, [pc, #472]	@ (800095c <display7SEG2+0x368>)
 8000784:	f000 fdec 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_2_GPIO_Port,SEG_2_2_Pin,RESET);//c
 8000788:	2200      	movs	r2, #0
 800078a:	2108      	movs	r1, #8
 800078c:	4873      	ldr	r0, [pc, #460]	@ (800095c <display7SEG2+0x368>)
 800078e:	f000 fde7 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_3_GPIO_Port,SEG_2_3_Pin,SET);//d
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000798:	4871      	ldr	r0, [pc, #452]	@ (8000960 <display7SEG2+0x36c>)
 800079a:	f000 fde1 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_4_GPIO_Port,SEG_2_4_Pin,SET); //e
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007a4:	486e      	ldr	r0, [pc, #440]	@ (8000960 <display7SEG2+0x36c>)
 80007a6:	f000 fddb 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_5_GPIO_Port,SEG_2_5_Pin,RESET); //f
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007b0:	486b      	ldr	r0, [pc, #428]	@ (8000960 <display7SEG2+0x36c>)
 80007b2:	f000 fdd5 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_6_GPIO_Port,SEG_2_6_Pin,RESET); //g
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007bc:	4868      	ldr	r0, [pc, #416]	@ (8000960 <display7SEG2+0x36c>)
 80007be:	f000 fdcf 	bl	8001360 <HAL_GPIO_WritePin>
				break;
 80007c2:	e0c7      	b.n	8000954 <display7SEG2+0x360>
		case 5:
			HAL_GPIO_WritePin(SEG_2_0_GPIO_Port,SEG_2_0_Pin,RESET); //a
 80007c4:	2200      	movs	r2, #0
 80007c6:	2102      	movs	r1, #2
 80007c8:	4864      	ldr	r0, [pc, #400]	@ (800095c <display7SEG2+0x368>)
 80007ca:	f000 fdc9 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_1_GPIO_Port,SEG_2_1_Pin,SET); //b
 80007ce:	2201      	movs	r2, #1
 80007d0:	2104      	movs	r1, #4
 80007d2:	4862      	ldr	r0, [pc, #392]	@ (800095c <display7SEG2+0x368>)
 80007d4:	f000 fdc4 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_2_GPIO_Port,SEG_2_2_Pin,RESET);//c
 80007d8:	2200      	movs	r2, #0
 80007da:	2108      	movs	r1, #8
 80007dc:	485f      	ldr	r0, [pc, #380]	@ (800095c <display7SEG2+0x368>)
 80007de:	f000 fdbf 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_3_GPIO_Port,SEG_2_3_Pin,RESET);//d
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007e8:	485d      	ldr	r0, [pc, #372]	@ (8000960 <display7SEG2+0x36c>)
 80007ea:	f000 fdb9 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_4_GPIO_Port,SEG_2_4_Pin,SET); //e
 80007ee:	2201      	movs	r2, #1
 80007f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007f4:	485a      	ldr	r0, [pc, #360]	@ (8000960 <display7SEG2+0x36c>)
 80007f6:	f000 fdb3 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_5_GPIO_Port,SEG_2_5_Pin,RESET); //f
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000800:	4857      	ldr	r0, [pc, #348]	@ (8000960 <display7SEG2+0x36c>)
 8000802:	f000 fdad 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_6_GPIO_Port,SEG_2_6_Pin,RESET); //g
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800080c:	4854      	ldr	r0, [pc, #336]	@ (8000960 <display7SEG2+0x36c>)
 800080e:	f000 fda7 	bl	8001360 <HAL_GPIO_WritePin>
				break;
 8000812:	e09f      	b.n	8000954 <display7SEG2+0x360>
		case 6:
			HAL_GPIO_WritePin(SEG_2_0_GPIO_Port,SEG_2_0_Pin,RESET); //a
 8000814:	2200      	movs	r2, #0
 8000816:	2102      	movs	r1, #2
 8000818:	4850      	ldr	r0, [pc, #320]	@ (800095c <display7SEG2+0x368>)
 800081a:	f000 fda1 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_1_GPIO_Port,SEG_2_1_Pin,SET); //b
 800081e:	2201      	movs	r2, #1
 8000820:	2104      	movs	r1, #4
 8000822:	484e      	ldr	r0, [pc, #312]	@ (800095c <display7SEG2+0x368>)
 8000824:	f000 fd9c 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_2_GPIO_Port,SEG_2_2_Pin,RESET);//c
 8000828:	2200      	movs	r2, #0
 800082a:	2108      	movs	r1, #8
 800082c:	484b      	ldr	r0, [pc, #300]	@ (800095c <display7SEG2+0x368>)
 800082e:	f000 fd97 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_3_GPIO_Port,SEG_2_3_Pin,RESET);//d
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000838:	4849      	ldr	r0, [pc, #292]	@ (8000960 <display7SEG2+0x36c>)
 800083a:	f000 fd91 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_4_GPIO_Port,SEG_2_4_Pin,RESET); //e
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000844:	4846      	ldr	r0, [pc, #280]	@ (8000960 <display7SEG2+0x36c>)
 8000846:	f000 fd8b 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_5_GPIO_Port,SEG_2_5_Pin,RESET); //f
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000850:	4843      	ldr	r0, [pc, #268]	@ (8000960 <display7SEG2+0x36c>)
 8000852:	f000 fd85 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_6_GPIO_Port,SEG_2_6_Pin,RESET); //g
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800085c:	4840      	ldr	r0, [pc, #256]	@ (8000960 <display7SEG2+0x36c>)
 800085e:	f000 fd7f 	bl	8001360 <HAL_GPIO_WritePin>
			break;
 8000862:	e077      	b.n	8000954 <display7SEG2+0x360>
		case 7:
			HAL_GPIO_WritePin(SEG_2_0_GPIO_Port,SEG_2_0_Pin,RESET); //a
 8000864:	2200      	movs	r2, #0
 8000866:	2102      	movs	r1, #2
 8000868:	483c      	ldr	r0, [pc, #240]	@ (800095c <display7SEG2+0x368>)
 800086a:	f000 fd79 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_1_GPIO_Port,SEG_2_1_Pin,RESET); //b
 800086e:	2200      	movs	r2, #0
 8000870:	2104      	movs	r1, #4
 8000872:	483a      	ldr	r0, [pc, #232]	@ (800095c <display7SEG2+0x368>)
 8000874:	f000 fd74 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_2_GPIO_Port,SEG_2_2_Pin,RESET);//c
 8000878:	2200      	movs	r2, #0
 800087a:	2108      	movs	r1, #8
 800087c:	4837      	ldr	r0, [pc, #220]	@ (800095c <display7SEG2+0x368>)
 800087e:	f000 fd6f 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_3_GPIO_Port,SEG_2_3_Pin,SET);//d
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000888:	4835      	ldr	r0, [pc, #212]	@ (8000960 <display7SEG2+0x36c>)
 800088a:	f000 fd69 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_4_GPIO_Port,SEG_2_4_Pin,SET); //e
 800088e:	2201      	movs	r2, #1
 8000890:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000894:	4832      	ldr	r0, [pc, #200]	@ (8000960 <display7SEG2+0x36c>)
 8000896:	f000 fd63 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_5_GPIO_Port,SEG_2_5_Pin,SET); //f
 800089a:	2201      	movs	r2, #1
 800089c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008a0:	482f      	ldr	r0, [pc, #188]	@ (8000960 <display7SEG2+0x36c>)
 80008a2:	f000 fd5d 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_6_GPIO_Port,SEG_2_6_Pin,SET); //g
 80008a6:	2201      	movs	r2, #1
 80008a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008ac:	482c      	ldr	r0, [pc, #176]	@ (8000960 <display7SEG2+0x36c>)
 80008ae:	f000 fd57 	bl	8001360 <HAL_GPIO_WritePin>
				break;
 80008b2:	e04f      	b.n	8000954 <display7SEG2+0x360>
		case 8:
			HAL_GPIO_WritePin(SEG_2_0_GPIO_Port,SEG_2_0_Pin,RESET); //a
 80008b4:	2200      	movs	r2, #0
 80008b6:	2102      	movs	r1, #2
 80008b8:	4828      	ldr	r0, [pc, #160]	@ (800095c <display7SEG2+0x368>)
 80008ba:	f000 fd51 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_1_GPIO_Port,SEG_2_1_Pin,RESET); //b
 80008be:	2200      	movs	r2, #0
 80008c0:	2104      	movs	r1, #4
 80008c2:	4826      	ldr	r0, [pc, #152]	@ (800095c <display7SEG2+0x368>)
 80008c4:	f000 fd4c 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_2_GPIO_Port,SEG_2_2_Pin,RESET);//c
 80008c8:	2200      	movs	r2, #0
 80008ca:	2108      	movs	r1, #8
 80008cc:	4823      	ldr	r0, [pc, #140]	@ (800095c <display7SEG2+0x368>)
 80008ce:	f000 fd47 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_3_GPIO_Port,SEG_2_3_Pin,RESET);//d
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d8:	4821      	ldr	r0, [pc, #132]	@ (8000960 <display7SEG2+0x36c>)
 80008da:	f000 fd41 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_4_GPIO_Port,SEG_2_4_Pin,RESET); //e
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008e4:	481e      	ldr	r0, [pc, #120]	@ (8000960 <display7SEG2+0x36c>)
 80008e6:	f000 fd3b 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_5_GPIO_Port,SEG_2_5_Pin,RESET); //f
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008f0:	481b      	ldr	r0, [pc, #108]	@ (8000960 <display7SEG2+0x36c>)
 80008f2:	f000 fd35 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_6_GPIO_Port,SEG_2_6_Pin,RESET); //g
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008fc:	4818      	ldr	r0, [pc, #96]	@ (8000960 <display7SEG2+0x36c>)
 80008fe:	f000 fd2f 	bl	8001360 <HAL_GPIO_WritePin>
				break;
 8000902:	e027      	b.n	8000954 <display7SEG2+0x360>
		case 9:
			HAL_GPIO_WritePin(SEG_2_0_GPIO_Port,SEG_2_0_Pin,RESET); //a
 8000904:	2200      	movs	r2, #0
 8000906:	2102      	movs	r1, #2
 8000908:	4814      	ldr	r0, [pc, #80]	@ (800095c <display7SEG2+0x368>)
 800090a:	f000 fd29 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_1_GPIO_Port,SEG_2_1_Pin,RESET); //b
 800090e:	2200      	movs	r2, #0
 8000910:	2104      	movs	r1, #4
 8000912:	4812      	ldr	r0, [pc, #72]	@ (800095c <display7SEG2+0x368>)
 8000914:	f000 fd24 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_2_GPIO_Port,SEG_2_2_Pin,RESET);//c
 8000918:	2200      	movs	r2, #0
 800091a:	2108      	movs	r1, #8
 800091c:	480f      	ldr	r0, [pc, #60]	@ (800095c <display7SEG2+0x368>)
 800091e:	f000 fd1f 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_3_GPIO_Port,SEG_2_3_Pin,RESET);//d
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000928:	480d      	ldr	r0, [pc, #52]	@ (8000960 <display7SEG2+0x36c>)
 800092a:	f000 fd19 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_4_GPIO_Port,SEG_2_4_Pin,SET); //e
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000934:	480a      	ldr	r0, [pc, #40]	@ (8000960 <display7SEG2+0x36c>)
 8000936:	f000 fd13 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_5_GPIO_Port,SEG_2_5_Pin,RESET); //f
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000940:	4807      	ldr	r0, [pc, #28]	@ (8000960 <display7SEG2+0x36c>)
 8000942:	f000 fd0d 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_2_6_GPIO_Port,SEG_2_6_Pin,RESET); //g
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800094c:	4804      	ldr	r0, [pc, #16]	@ (8000960 <display7SEG2+0x36c>)
 800094e:	f000 fd07 	bl	8001360 <HAL_GPIO_WritePin>
				break;
 8000952:	bf00      	nop
		}
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40010800 	.word	0x40010800
 8000960:	40010c00 	.word	0x40010c00

08000964 <traffic1_run>:
void traffic1_run(){
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
		display7SEG(countOfGroup1);
 8000968:	4b32      	ldr	r3, [pc, #200]	@ (8000a34 <traffic1_run+0xd0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fc77 	bl	8000260 <display7SEG>
		countOfGroup1--;
 8000972:	4b30      	ldr	r3, [pc, #192]	@ (8000a34 <traffic1_run+0xd0>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3b01      	subs	r3, #1
 8000978:	4a2e      	ldr	r2, [pc, #184]	@ (8000a34 <traffic1_run+0xd0>)
 800097a:	6013      	str	r3, [r2, #0]
		switch(stateOfGroup1){
 800097c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a38 <traffic1_run+0xd4>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d03a      	beq.n	80009fa <traffic1_run+0x96>
 8000984:	2b02      	cmp	r3, #2
 8000986:	dc52      	bgt.n	8000a2e <traffic1_run+0xca>
 8000988:	2b00      	cmp	r3, #0
 800098a:	d002      	beq.n	8000992 <traffic1_run+0x2e>
 800098c:	2b01      	cmp	r3, #1
 800098e:	d01a      	beq.n	80009c6 <traffic1_run+0x62>
			HAL_GPIO_WritePin(LED_1_GPIO_Port,LED_1_Pin,RESET);
			HAL_GPIO_WritePin(LED_2_GPIO_Port,LED_2_Pin,RESET);
			HAL_GPIO_WritePin(LED_3_GPIO_Port,LED_3_Pin,SET);
			break;
		default:
			break;
 8000990:	e04d      	b.n	8000a2e <traffic1_run+0xca>
			if(countOfGroup1 < 0){
 8000992:	4b28      	ldr	r3, [pc, #160]	@ (8000a34 <traffic1_run+0xd0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	da05      	bge.n	80009a6 <traffic1_run+0x42>
				stateOfGroup1 = GREEN;
 800099a:	4b27      	ldr	r3, [pc, #156]	@ (8000a38 <traffic1_run+0xd4>)
 800099c:	2202      	movs	r2, #2
 800099e:	601a      	str	r2, [r3, #0]
				countOfGroup1 = 3;
 80009a0:	4b24      	ldr	r3, [pc, #144]	@ (8000a34 <traffic1_run+0xd0>)
 80009a2:	2203      	movs	r2, #3
 80009a4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_1_GPIO_Port,LED_1_Pin,SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	2101      	movs	r1, #1
 80009aa:	4824      	ldr	r0, [pc, #144]	@ (8000a3c <traffic1_run+0xd8>)
 80009ac:	f000 fcd8 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port,LED_2_Pin,RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2102      	movs	r1, #2
 80009b4:	4821      	ldr	r0, [pc, #132]	@ (8000a3c <traffic1_run+0xd8>)
 80009b6:	f000 fcd3 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port,LED_3_Pin,RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2104      	movs	r1, #4
 80009be:	481f      	ldr	r0, [pc, #124]	@ (8000a3c <traffic1_run+0xd8>)
 80009c0:	f000 fcce 	bl	8001360 <HAL_GPIO_WritePin>
			break;
 80009c4:	e034      	b.n	8000a30 <traffic1_run+0xcc>
			if(countOfGroup1 < 0){
 80009c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <traffic1_run+0xd0>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	da05      	bge.n	80009da <traffic1_run+0x76>
				stateOfGroup1 = RED;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <traffic1_run+0xd4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
				countOfGroup1 = 5;
 80009d4:	4b17      	ldr	r3, [pc, #92]	@ (8000a34 <traffic1_run+0xd0>)
 80009d6:	2205      	movs	r2, #5
 80009d8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_1_GPIO_Port,LED_1_Pin,RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2101      	movs	r1, #1
 80009de:	4817      	ldr	r0, [pc, #92]	@ (8000a3c <traffic1_run+0xd8>)
 80009e0:	f000 fcbe 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port,LED_2_Pin,SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2102      	movs	r1, #2
 80009e8:	4814      	ldr	r0, [pc, #80]	@ (8000a3c <traffic1_run+0xd8>)
 80009ea:	f000 fcb9 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port,LED_3_Pin,RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2104      	movs	r1, #4
 80009f2:	4812      	ldr	r0, [pc, #72]	@ (8000a3c <traffic1_run+0xd8>)
 80009f4:	f000 fcb4 	bl	8001360 <HAL_GPIO_WritePin>
			break;
 80009f8:	e01a      	b.n	8000a30 <traffic1_run+0xcc>
			if(countOfGroup1 < 0){
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <traffic1_run+0xd0>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	da05      	bge.n	8000a0e <traffic1_run+0xaa>
				stateOfGroup1 = YELLOW;
 8000a02:	4b0d      	ldr	r3, [pc, #52]	@ (8000a38 <traffic1_run+0xd4>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	601a      	str	r2, [r3, #0]
				countOfGroup1 = 2;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	@ (8000a34 <traffic1_run+0xd0>)
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_1_GPIO_Port,LED_1_Pin,RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2101      	movs	r1, #1
 8000a12:	480a      	ldr	r0, [pc, #40]	@ (8000a3c <traffic1_run+0xd8>)
 8000a14:	f000 fca4 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port,LED_2_Pin,RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	4807      	ldr	r0, [pc, #28]	@ (8000a3c <traffic1_run+0xd8>)
 8000a1e:	f000 fc9f 	bl	8001360 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port,LED_3_Pin,SET);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2104      	movs	r1, #4
 8000a26:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <traffic1_run+0xd8>)
 8000a28:	f000 fc9a 	bl	8001360 <HAL_GPIO_WritePin>
			break;
 8000a2c:	e000      	b.n	8000a30 <traffic1_run+0xcc>
			break;
 8000a2e:	bf00      	nop
		}
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20000034 	.word	0x20000034
 8000a3c:	40010c00 	.word	0x40010c00

08000a40 <traffic2_run>:
void traffic2_run(){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
		display7SEG2(countOfGroup2);
 8000a44:	4b32      	ldr	r3, [pc, #200]	@ (8000b10 <traffic2_run+0xd0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fdd3 	bl	80005f4 <display7SEG2>
		countOfGroup2--;
 8000a4e:	4b30      	ldr	r3, [pc, #192]	@ (8000b10 <traffic2_run+0xd0>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	4a2e      	ldr	r2, [pc, #184]	@ (8000b10 <traffic2_run+0xd0>)
 8000a56:	6013      	str	r3, [r2, #0]
		switch(stateOfGroup2){
 8000a58:	4b2e      	ldr	r3, [pc, #184]	@ (8000b14 <traffic2_run+0xd4>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d03a      	beq.n	8000ad6 <traffic2_run+0x96>
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	dc52      	bgt.n	8000b0a <traffic2_run+0xca>
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d002      	beq.n	8000a6e <traffic2_run+0x2e>
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d01a      	beq.n	8000aa2 <traffic2_run+0x62>
				HAL_GPIO_WritePin(LED_4_GPIO_Port,LED_4_Pin,RESET);
				HAL_GPIO_WritePin(LED_5_GPIO_Port,LED_5_Pin,RESET);
				HAL_GPIO_WritePin(LED_6_GPIO_Port,LED_6_Pin,SET);
				break;
			default:
				break;
 8000a6c:	e04d      	b.n	8000b0a <traffic2_run+0xca>
			if(countOfGroup2 < 0){
 8000a6e:	4b28      	ldr	r3, [pc, #160]	@ (8000b10 <traffic2_run+0xd0>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	da05      	bge.n	8000a82 <traffic2_run+0x42>
					stateOfGroup2 = GREEN;
 8000a76:	4b27      	ldr	r3, [pc, #156]	@ (8000b14 <traffic2_run+0xd4>)
 8000a78:	2202      	movs	r2, #2
 8000a7a:	601a      	str	r2, [r3, #0]
					countOfGroup2 = 3;
 8000a7c:	4b24      	ldr	r3, [pc, #144]	@ (8000b10 <traffic2_run+0xd0>)
 8000a7e:	2203      	movs	r2, #3
 8000a80:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_4_GPIO_Port,LED_4_Pin,SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	2108      	movs	r1, #8
 8000a86:	4824      	ldr	r0, [pc, #144]	@ (8000b18 <traffic2_run+0xd8>)
 8000a88:	f000 fc6a 	bl	8001360 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_5_GPIO_Port,LED_5_Pin,RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2110      	movs	r1, #16
 8000a90:	4821      	ldr	r0, [pc, #132]	@ (8000b18 <traffic2_run+0xd8>)
 8000a92:	f000 fc65 	bl	8001360 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_6_GPIO_Port,LED_6_Pin,RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2120      	movs	r1, #32
 8000a9a:	481f      	ldr	r0, [pc, #124]	@ (8000b18 <traffic2_run+0xd8>)
 8000a9c:	f000 fc60 	bl	8001360 <HAL_GPIO_WritePin>
				break;
 8000aa0:	e034      	b.n	8000b0c <traffic2_run+0xcc>
				if(countOfGroup2 < 0){
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b10 <traffic2_run+0xd0>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	da05      	bge.n	8000ab6 <traffic2_run+0x76>
					stateOfGroup2 = RED;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b14 <traffic2_run+0xd4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
					countOfGroup2 = 5;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	@ (8000b10 <traffic2_run+0xd0>)
 8000ab2:	2205      	movs	r2, #5
 8000ab4:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_4_GPIO_Port,LED_4_Pin,RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2108      	movs	r1, #8
 8000aba:	4817      	ldr	r0, [pc, #92]	@ (8000b18 <traffic2_run+0xd8>)
 8000abc:	f000 fc50 	bl	8001360 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_5_GPIO_Port,LED_5_Pin,SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2110      	movs	r1, #16
 8000ac4:	4814      	ldr	r0, [pc, #80]	@ (8000b18 <traffic2_run+0xd8>)
 8000ac6:	f000 fc4b 	bl	8001360 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_6_GPIO_Port,LED_6_Pin,RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2120      	movs	r1, #32
 8000ace:	4812      	ldr	r0, [pc, #72]	@ (8000b18 <traffic2_run+0xd8>)
 8000ad0:	f000 fc46 	bl	8001360 <HAL_GPIO_WritePin>
				break;
 8000ad4:	e01a      	b.n	8000b0c <traffic2_run+0xcc>
				if(countOfGroup2 < 0){
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <traffic2_run+0xd0>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	da05      	bge.n	8000aea <traffic2_run+0xaa>
					stateOfGroup2 = YELLOW;
 8000ade:	4b0d      	ldr	r3, [pc, #52]	@ (8000b14 <traffic2_run+0xd4>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	601a      	str	r2, [r3, #0]
					countOfGroup2 = 2;
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <traffic2_run+0xd0>)
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_4_GPIO_Port,LED_4_Pin,RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2108      	movs	r1, #8
 8000aee:	480a      	ldr	r0, [pc, #40]	@ (8000b18 <traffic2_run+0xd8>)
 8000af0:	f000 fc36 	bl	8001360 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_5_GPIO_Port,LED_5_Pin,RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2110      	movs	r1, #16
 8000af8:	4807      	ldr	r0, [pc, #28]	@ (8000b18 <traffic2_run+0xd8>)
 8000afa:	f000 fc31 	bl	8001360 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_6_GPIO_Port,LED_6_Pin,SET);
 8000afe:	2201      	movs	r2, #1
 8000b00:	2120      	movs	r1, #32
 8000b02:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <traffic2_run+0xd8>)
 8000b04:	f000 fc2c 	bl	8001360 <HAL_GPIO_WritePin>
				break;
 8000b08:	e000      	b.n	8000b0c <traffic2_run+0xcc>
				break;
 8000b0a:	bf00      	nop
			}
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000004 	.word	0x20000004
 8000b18:	40010c00 	.word	0x40010c00

08000b1c <exercise5_run>:
void exercise5_run(){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	traffic1_run();
 8000b20:	f7ff ff20 	bl	8000964 <traffic1_run>
	traffic2_run();
 8000b24:	f7ff ff8c 	bl	8000a40 <traffic2_run>
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b30:	f000 f930 	bl	8000d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b34:	f000 f80c 	bl	8000b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b38:	f000 f846 	bl	8000bc8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  init_exercise5();
 8000b3c:	f7ff fb06 	bl	800014c <init_exercise5>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  exercise5_run();
 8000b40:	f7ff ffec 	bl	8000b1c <exercise5_run>
	  HAL_Delay(1000);
 8000b44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b48:	f000 f986 	bl	8000e58 <HAL_Delay>
	  exercise5_run();
 8000b4c:	bf00      	nop
 8000b4e:	e7f7      	b.n	8000b40 <main+0x14>

08000b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b090      	sub	sp, #64	@ 0x40
 8000b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b56:	f107 0318 	add.w	r3, r7, #24
 8000b5a:	2228      	movs	r2, #40	@ 0x28
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 f80e 	bl	8001b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b76:	2301      	movs	r3, #1
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b82:	f107 0318 	add.w	r3, r7, #24
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 fc1c 	bl	80013c4 <HAL_RCC_OscConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b92:	f000 f86f 	bl	8000c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b96:	230f      	movs	r3, #15
 8000b98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fe8a 	bl	80018c8 <HAL_RCC_ClockConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bba:	f000 f85b 	bl	8000c74 <Error_Handler>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3740      	adds	r7, #64	@ 0x40
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b22      	ldr	r3, [pc, #136]	@ (8000c68 <MX_GPIO_Init+0xa0>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a21      	ldr	r2, [pc, #132]	@ (8000c68 <MX_GPIO_Init+0xa0>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c68 <MX_GPIO_Init+0xa0>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c68 <MX_GPIO_Init+0xa0>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c68 <MX_GPIO_Init+0xa0>)
 8000bfa:	f043 0308 	orr.w	r3, r3, #8
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <MX_GPIO_Init+0xa0>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0308 	and.w	r3, r3, #8
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_2_0_Pin|SEG_2_1_Pin|SEG_2_2_Pin|LED_GREEN_Pin
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f643 71fe 	movw	r1, #16382	@ 0x3ffe
 8000c12:	4816      	ldr	r0, [pc, #88]	@ (8000c6c <MX_GPIO_Init+0xa4>)
 8000c14:	f000 fba4 	bl	8001360 <HAL_GPIO_WritePin>
                          |LED_RED_Pin|LED_YELLOW_Pin|SEG_0_Pin|SEG_1_Pin
                          |SEG_2_Pin|SEG_3_Pin|SEG_4_Pin|SEG_5_Pin
                          |SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_11_Pin
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000c1e:	4814      	ldr	r0, [pc, #80]	@ (8000c70 <MX_GPIO_Init+0xa8>)
 8000c20:	f000 fb9e 	bl	8001360 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG_2_0_Pin SEG_2_1_Pin SEG_2_2_Pin LED_GREEN_Pin
                           LED_RED_Pin LED_YELLOW_Pin SEG_0_Pin SEG_1_Pin
                           SEG_2_Pin SEG_3_Pin SEG_4_Pin SEG_5_Pin
                           SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_2_0_Pin|SEG_2_1_Pin|SEG_2_2_Pin|LED_GREEN_Pin
 8000c24:	f643 73fe 	movw	r3, #16382	@ 0x3ffe
 8000c28:	60bb      	str	r3, [r7, #8]
                          |LED_RED_Pin|LED_YELLOW_Pin|SEG_0_Pin|SEG_1_Pin
                          |SEG_2_Pin|SEG_3_Pin|SEG_4_Pin|SEG_5_Pin
                          |SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2302      	movs	r3, #2
 8000c34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480b      	ldr	r0, [pc, #44]	@ (8000c6c <MX_GPIO_Init+0xa4>)
 8000c3e:	f000 fa13 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_11_Pin
                           LED_12_Pin SEG_2_3_Pin SEG_2_4_Pin SEG_2_5_Pin
                           SEG_2_6_Pin LED_4_Pin LED_5_Pin LED_6_Pin
                           LED_7_Pin LED_8_Pin LED_9_Pin LED_10_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_11_Pin
 8000c42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c46:	60bb      	str	r3, [r7, #8]
                          |LED_12_Pin|SEG_2_3_Pin|SEG_2_4_Pin|SEG_2_5_Pin
                          |SEG_2_6_Pin|LED_4_Pin|LED_5_Pin|LED_6_Pin
                          |LED_7_Pin|LED_8_Pin|LED_9_Pin|LED_10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2302      	movs	r3, #2
 8000c52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <MX_GPIO_Init+0xa8>)
 8000c5c:	f000 fa04 	bl	8001068 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c60:	bf00      	nop
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40010800 	.word	0x40010800
 8000c70:	40010c00 	.word	0x40010c00

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <Error_Handler+0x8>

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	4a14      	ldr	r2, [pc, #80]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6193      	str	r3, [r2, #24]
 8000c92:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca8:	61d3      	str	r3, [r2, #28]
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <HAL_MspInit+0x5c>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <HAL_MspInit+0x60>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	4a04      	ldr	r2, [pc, #16]	@ (8000ce0 <HAL_MspInit+0x60>)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010000 	.word	0x40010000

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <NMI_Handler+0x4>

08000cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f874 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d48:	f7ff fff8 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d4c:	480b      	ldr	r0, [pc, #44]	@ (8000d7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d4e:	490c      	ldr	r1, [pc, #48]	@ (8000d80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d50:	4a0c      	ldr	r2, [pc, #48]	@ (8000d84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a09      	ldr	r2, [pc, #36]	@ (8000d88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d64:	4c09      	ldr	r4, [pc, #36]	@ (8000d8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d72:	f000 ff0d 	bl	8001b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d76:	f7ff fed9 	bl	8000b2c <main>
  bx lr
 8000d7a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d80:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000d84:	08001c1c 	.word	0x08001c1c
  ldr r2, =_sbss
 8000d88:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000d8c:	2000003c 	.word	0x2000003c

08000d90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC1_2_IRQHandler>
	...

08000d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <HAL_Init+0x28>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	@ (8000dbc <HAL_Init+0x28>)
 8000d9e:	f043 0310 	orr.w	r3, r3, #16
 8000da2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f92b 	bl	8001000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	200f      	movs	r0, #15
 8000dac:	f000 f808 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff ff66 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40022000 	.word	0x40022000

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <HAL_InitTick+0x54>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <HAL_InitTick+0x58>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f935 	bl	800104e <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 f90b 	bl	8001016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	@ (8000e1c <HAL_InitTick+0x5c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	2000000c 	.word	0x2000000c
 8000e18:	20000014 	.word	0x20000014
 8000e1c:	20000010 	.word	0x20000010

08000e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <HAL_IncTick+0x1c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a03      	ldr	r2, [pc, #12]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	20000014 	.word	0x20000014
 8000e40:	20000038 	.word	0x20000038

08000e44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b02      	ldr	r3, [pc, #8]	@ (8000e54 <HAL_GetTick+0x10>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	20000038 	.word	0x20000038

08000e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff fff0 	bl	8000e44 <HAL_GetTick>
 8000e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e70:	d005      	beq.n	8000e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e72:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <HAL_Delay+0x44>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7e:	bf00      	nop
 8000e80:	f7ff ffe0 	bl	8000e44 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d8f7      	bhi.n	8000e80 <HAL_Delay+0x28>
  {
  }
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000014 	.word	0x20000014

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	@ (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	@ (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	@ 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	@ 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fcc:	d301      	bcc.n	8000fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00f      	b.n	8000ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <SysTick_Config+0x40>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fda:	210f      	movs	r1, #15
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f7ff ff90 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe4:	4b05      	ldr	r3, [pc, #20]	@ (8000ffc <SysTick_Config+0x40>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fea:	4b04      	ldr	r3, [pc, #16]	@ (8000ffc <SysTick_Config+0x40>)
 8000fec:	2207      	movs	r2, #7
 8000fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ff49 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001028:	f7ff ff5e 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 800102c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	6978      	ldr	r0, [r7, #20]
 8001034:	f7ff ff90 	bl	8000f58 <NVIC_EncodePriority>
 8001038:	4602      	mov	r2, r0
 800103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff5f 	bl	8000f04 <__NVIC_SetPriority>
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffb0 	bl	8000fbc <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b480      	push	{r7}
 800106a:	b08b      	sub	sp, #44	@ 0x2c
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107a:	e161      	b.n	8001340 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800107c:	2201      	movs	r2, #1
 800107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	429a      	cmp	r2, r3
 8001096:	f040 8150 	bne.w	800133a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	4a97      	ldr	r2, [pc, #604]	@ (80012fc <HAL_GPIO_Init+0x294>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d05e      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
 80010a4:	4a95      	ldr	r2, [pc, #596]	@ (80012fc <HAL_GPIO_Init+0x294>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d875      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010aa:	4a95      	ldr	r2, [pc, #596]	@ (8001300 <HAL_GPIO_Init+0x298>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d058      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
 80010b0:	4a93      	ldr	r2, [pc, #588]	@ (8001300 <HAL_GPIO_Init+0x298>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d86f      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010b6:	4a93      	ldr	r2, [pc, #588]	@ (8001304 <HAL_GPIO_Init+0x29c>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d052      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
 80010bc:	4a91      	ldr	r2, [pc, #580]	@ (8001304 <HAL_GPIO_Init+0x29c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d869      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010c2:	4a91      	ldr	r2, [pc, #580]	@ (8001308 <HAL_GPIO_Init+0x2a0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d04c      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
 80010c8:	4a8f      	ldr	r2, [pc, #572]	@ (8001308 <HAL_GPIO_Init+0x2a0>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d863      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010ce:	4a8f      	ldr	r2, [pc, #572]	@ (800130c <HAL_GPIO_Init+0x2a4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d046      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
 80010d4:	4a8d      	ldr	r2, [pc, #564]	@ (800130c <HAL_GPIO_Init+0x2a4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d85d      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010da:	2b12      	cmp	r3, #18
 80010dc:	d82a      	bhi.n	8001134 <HAL_GPIO_Init+0xcc>
 80010de:	2b12      	cmp	r3, #18
 80010e0:	d859      	bhi.n	8001196 <HAL_GPIO_Init+0x12e>
 80010e2:	a201      	add	r2, pc, #4	@ (adr r2, 80010e8 <HAL_GPIO_Init+0x80>)
 80010e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e8:	08001163 	.word	0x08001163
 80010ec:	0800113d 	.word	0x0800113d
 80010f0:	0800114f 	.word	0x0800114f
 80010f4:	08001191 	.word	0x08001191
 80010f8:	08001197 	.word	0x08001197
 80010fc:	08001197 	.word	0x08001197
 8001100:	08001197 	.word	0x08001197
 8001104:	08001197 	.word	0x08001197
 8001108:	08001197 	.word	0x08001197
 800110c:	08001197 	.word	0x08001197
 8001110:	08001197 	.word	0x08001197
 8001114:	08001197 	.word	0x08001197
 8001118:	08001197 	.word	0x08001197
 800111c:	08001197 	.word	0x08001197
 8001120:	08001197 	.word	0x08001197
 8001124:	08001197 	.word	0x08001197
 8001128:	08001197 	.word	0x08001197
 800112c:	08001145 	.word	0x08001145
 8001130:	08001159 	.word	0x08001159
 8001134:	4a76      	ldr	r2, [pc, #472]	@ (8001310 <HAL_GPIO_Init+0x2a8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d013      	beq.n	8001162 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800113a:	e02c      	b.n	8001196 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	623b      	str	r3, [r7, #32]
          break;
 8001142:	e029      	b.n	8001198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	3304      	adds	r3, #4
 800114a:	623b      	str	r3, [r7, #32]
          break;
 800114c:	e024      	b.n	8001198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	3308      	adds	r3, #8
 8001154:	623b      	str	r3, [r7, #32]
          break;
 8001156:	e01f      	b.n	8001198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	330c      	adds	r3, #12
 800115e:	623b      	str	r3, [r7, #32]
          break;
 8001160:	e01a      	b.n	8001198 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d102      	bne.n	8001170 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800116a:	2304      	movs	r3, #4
 800116c:	623b      	str	r3, [r7, #32]
          break;
 800116e:	e013      	b.n	8001198 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d105      	bne.n	8001184 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001178:	2308      	movs	r3, #8
 800117a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69fa      	ldr	r2, [r7, #28]
 8001180:	611a      	str	r2, [r3, #16]
          break;
 8001182:	e009      	b.n	8001198 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001184:	2308      	movs	r3, #8
 8001186:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69fa      	ldr	r2, [r7, #28]
 800118c:	615a      	str	r2, [r3, #20]
          break;
 800118e:	e003      	b.n	8001198 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
          break;
 8001194:	e000      	b.n	8001198 <HAL_GPIO_Init+0x130>
          break;
 8001196:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	2bff      	cmp	r3, #255	@ 0xff
 800119c:	d801      	bhi.n	80011a2 <HAL_GPIO_Init+0x13a>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	e001      	b.n	80011a6 <HAL_GPIO_Init+0x13e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3304      	adds	r3, #4
 80011a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	2bff      	cmp	r3, #255	@ 0xff
 80011ac:	d802      	bhi.n	80011b4 <HAL_GPIO_Init+0x14c>
 80011ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	e002      	b.n	80011ba <HAL_GPIO_Init+0x152>
 80011b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b6:	3b08      	subs	r3, #8
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	210f      	movs	r1, #15
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	401a      	ands	r2, r3
 80011cc:	6a39      	ldr	r1, [r7, #32]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	431a      	orrs	r2, r3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 80a9 	beq.w	800133a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001314 <HAL_GPIO_Init+0x2ac>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a49      	ldr	r2, [pc, #292]	@ (8001314 <HAL_GPIO_Init+0x2ac>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b47      	ldr	r3, [pc, #284]	@ (8001314 <HAL_GPIO_Init+0x2ac>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001200:	4a45      	ldr	r2, [pc, #276]	@ (8001318 <HAL_GPIO_Init+0x2b0>)
 8001202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	4013      	ands	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a3d      	ldr	r2, [pc, #244]	@ (800131c <HAL_GPIO_Init+0x2b4>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d00d      	beq.n	8001248 <HAL_GPIO_Init+0x1e0>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a3c      	ldr	r2, [pc, #240]	@ (8001320 <HAL_GPIO_Init+0x2b8>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d007      	beq.n	8001244 <HAL_GPIO_Init+0x1dc>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a3b      	ldr	r2, [pc, #236]	@ (8001324 <HAL_GPIO_Init+0x2bc>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d101      	bne.n	8001240 <HAL_GPIO_Init+0x1d8>
 800123c:	2302      	movs	r3, #2
 800123e:	e004      	b.n	800124a <HAL_GPIO_Init+0x1e2>
 8001240:	2303      	movs	r3, #3
 8001242:	e002      	b.n	800124a <HAL_GPIO_Init+0x1e2>
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <HAL_GPIO_Init+0x1e2>
 8001248:	2300      	movs	r3, #0
 800124a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800124c:	f002 0203 	and.w	r2, r2, #3
 8001250:	0092      	lsls	r2, r2, #2
 8001252:	4093      	lsls	r3, r2
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800125a:	492f      	ldr	r1, [pc, #188]	@ (8001318 <HAL_GPIO_Init+0x2b0>)
 800125c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3302      	adds	r3, #2
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001274:	4b2c      	ldr	r3, [pc, #176]	@ (8001328 <HAL_GPIO_Init+0x2c0>)
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	492b      	ldr	r1, [pc, #172]	@ (8001328 <HAL_GPIO_Init+0x2c0>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	608b      	str	r3, [r1, #8]
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001282:	4b29      	ldr	r3, [pc, #164]	@ (8001328 <HAL_GPIO_Init+0x2c0>)
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	43db      	mvns	r3, r3
 800128a:	4927      	ldr	r1, [pc, #156]	@ (8001328 <HAL_GPIO_Init+0x2c0>)
 800128c:	4013      	ands	r3, r2
 800128e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800129c:	4b22      	ldr	r3, [pc, #136]	@ (8001328 <HAL_GPIO_Init+0x2c0>)
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	4921      	ldr	r1, [pc, #132]	@ (8001328 <HAL_GPIO_Init+0x2c0>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	60cb      	str	r3, [r1, #12]
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001328 <HAL_GPIO_Init+0x2c0>)
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	491d      	ldr	r1, [pc, #116]	@ (8001328 <HAL_GPIO_Init+0x2c0>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012c4:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <HAL_GPIO_Init+0x2c0>)
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	4917      	ldr	r1, [pc, #92]	@ (8001328 <HAL_GPIO_Init+0x2c0>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012d2:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <HAL_GPIO_Init+0x2c0>)
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	43db      	mvns	r3, r3
 80012da:	4913      	ldr	r1, [pc, #76]	@ (8001328 <HAL_GPIO_Init+0x2c0>)
 80012dc:	4013      	ands	r3, r2
 80012de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d01f      	beq.n	800132c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <HAL_GPIO_Init+0x2c0>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	490d      	ldr	r1, [pc, #52]	@ (8001328 <HAL_GPIO_Init+0x2c0>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	600b      	str	r3, [r1, #0]
 80012f8:	e01f      	b.n	800133a <HAL_GPIO_Init+0x2d2>
 80012fa:	bf00      	nop
 80012fc:	10320000 	.word	0x10320000
 8001300:	10310000 	.word	0x10310000
 8001304:	10220000 	.word	0x10220000
 8001308:	10210000 	.word	0x10210000
 800130c:	10120000 	.word	0x10120000
 8001310:	10110000 	.word	0x10110000
 8001314:	40021000 	.word	0x40021000
 8001318:	40010000 	.word	0x40010000
 800131c:	40010800 	.word	0x40010800
 8001320:	40010c00 	.word	0x40010c00
 8001324:	40011000 	.word	0x40011000
 8001328:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800132c:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <HAL_GPIO_Init+0x2f4>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	43db      	mvns	r3, r3
 8001334:	4909      	ldr	r1, [pc, #36]	@ (800135c <HAL_GPIO_Init+0x2f4>)
 8001336:	4013      	ands	r3, r2
 8001338:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800133a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133c:	3301      	adds	r3, #1
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001346:	fa22 f303 	lsr.w	r3, r2, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	f47f ae96 	bne.w	800107c <HAL_GPIO_Init+0x14>
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	372c      	adds	r7, #44	@ 0x2c
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	40010400 	.word	0x40010400

08001360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	807b      	strh	r3, [r7, #2]
 800136c:	4613      	mov	r3, r2
 800136e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001370:	787b      	ldrb	r3, [r7, #1]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001376:	887a      	ldrh	r2, [r7, #2]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800137c:	e003      	b.n	8001386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	041a      	lsls	r2, r3, #16
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	611a      	str	r2, [r3, #16]
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013a2:	887a      	ldrh	r2, [r7, #2]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4013      	ands	r3, r2
 80013a8:	041a      	lsls	r2, r3, #16
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	43d9      	mvns	r1, r3
 80013ae:	887b      	ldrh	r3, [r7, #2]
 80013b0:	400b      	ands	r3, r1
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	611a      	str	r2, [r3, #16]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
	...

080013c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e272      	b.n	80018bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 8087 	beq.w	80014f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013e4:	4b92      	ldr	r3, [pc, #584]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 030c 	and.w	r3, r3, #12
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	d00c      	beq.n	800140a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013f0:	4b8f      	ldr	r3, [pc, #572]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 030c 	and.w	r3, r3, #12
 80013f8:	2b08      	cmp	r3, #8
 80013fa:	d112      	bne.n	8001422 <HAL_RCC_OscConfig+0x5e>
 80013fc:	4b8c      	ldr	r3, [pc, #560]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001408:	d10b      	bne.n	8001422 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140a:	4b89      	ldr	r3, [pc, #548]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d06c      	beq.n	80014f0 <HAL_RCC_OscConfig+0x12c>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d168      	bne.n	80014f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e24c      	b.n	80018bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800142a:	d106      	bne.n	800143a <HAL_RCC_OscConfig+0x76>
 800142c:	4b80      	ldr	r3, [pc, #512]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a7f      	ldr	r2, [pc, #508]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001432:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	e02e      	b.n	8001498 <HAL_RCC_OscConfig+0xd4>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x98>
 8001442:	4b7b      	ldr	r3, [pc, #492]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a7a      	ldr	r2, [pc, #488]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001448:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	4b78      	ldr	r3, [pc, #480]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a77      	ldr	r2, [pc, #476]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001454:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e01d      	b.n	8001498 <HAL_RCC_OscConfig+0xd4>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001464:	d10c      	bne.n	8001480 <HAL_RCC_OscConfig+0xbc>
 8001466:	4b72      	ldr	r3, [pc, #456]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a71      	ldr	r2, [pc, #452]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 800146c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	4b6f      	ldr	r3, [pc, #444]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a6e      	ldr	r2, [pc, #440]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e00b      	b.n	8001498 <HAL_RCC_OscConfig+0xd4>
 8001480:	4b6b      	ldr	r3, [pc, #428]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a6a      	ldr	r2, [pc, #424]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b68      	ldr	r3, [pc, #416]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a67      	ldr	r2, [pc, #412]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001492:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001496:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d013      	beq.n	80014c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fcd0 	bl	8000e44 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a8:	f7ff fccc 	bl	8000e44 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b64      	cmp	r3, #100	@ 0x64
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e200      	b.n	80018bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0xe4>
 80014c6:	e014      	b.n	80014f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fcbc 	bl	8000e44 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d0:	f7ff fcb8 	bl	8000e44 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b64      	cmp	r3, #100	@ 0x64
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e1ec      	b.n	80018bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e2:	4b53      	ldr	r3, [pc, #332]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x10c>
 80014ee:	e000      	b.n	80014f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d063      	beq.n	80015c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 030c 	and.w	r3, r3, #12
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00b      	beq.n	8001522 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800150a:	4b49      	ldr	r3, [pc, #292]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b08      	cmp	r3, #8
 8001514:	d11c      	bne.n	8001550 <HAL_RCC_OscConfig+0x18c>
 8001516:	4b46      	ldr	r3, [pc, #280]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d116      	bne.n	8001550 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001522:	4b43      	ldr	r3, [pc, #268]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d005      	beq.n	800153a <HAL_RCC_OscConfig+0x176>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d001      	beq.n	800153a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e1c0      	b.n	80018bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153a:	4b3d      	ldr	r3, [pc, #244]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4939      	ldr	r1, [pc, #228]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 800154a:	4313      	orrs	r3, r2
 800154c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154e:	e03a      	b.n	80015c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d020      	beq.n	800159a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001558:	4b36      	ldr	r3, [pc, #216]	@ (8001634 <HAL_RCC_OscConfig+0x270>)
 800155a:	2201      	movs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff fc71 	bl	8000e44 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001566:	f7ff fc6d 	bl	8000e44 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e1a1      	b.n	80018bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001578:	4b2d      	ldr	r3, [pc, #180]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001584:	4b2a      	ldr	r3, [pc, #168]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4927      	ldr	r1, [pc, #156]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 8001594:	4313      	orrs	r3, r2
 8001596:	600b      	str	r3, [r1, #0]
 8001598:	e015      	b.n	80015c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800159a:	4b26      	ldr	r3, [pc, #152]	@ (8001634 <HAL_RCC_OscConfig+0x270>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fc50 	bl	8000e44 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a8:	f7ff fc4c 	bl	8000e44 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e180      	b.n	80018bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d03a      	beq.n	8001648 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d019      	beq.n	800160e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015da:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <HAL_RCC_OscConfig+0x274>)
 80015dc:	2201      	movs	r2, #1
 80015de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e0:	f7ff fc30 	bl	8000e44 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e8:	f7ff fc2c 	bl	8000e44 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e160      	b.n	80018bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001630 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001606:	2001      	movs	r0, #1
 8001608:	f000 fa9c 	bl	8001b44 <RCC_Delay>
 800160c:	e01c      	b.n	8001648 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160e:	4b0a      	ldr	r3, [pc, #40]	@ (8001638 <HAL_RCC_OscConfig+0x274>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001614:	f7ff fc16 	bl	8000e44 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800161a:	e00f      	b.n	800163c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161c:	f7ff fc12 	bl	8000e44 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d908      	bls.n	800163c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e146      	b.n	80018bc <HAL_RCC_OscConfig+0x4f8>
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000
 8001634:	42420000 	.word	0x42420000
 8001638:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163c:	4b92      	ldr	r3, [pc, #584]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 800163e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1e9      	bne.n	800161c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80a6 	beq.w	80017a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165a:	4b8b      	ldr	r3, [pc, #556]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10d      	bne.n	8001682 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	4b88      	ldr	r3, [pc, #544]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	4a87      	ldr	r2, [pc, #540]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 800166c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001670:	61d3      	str	r3, [r2, #28]
 8001672:	4b85      	ldr	r3, [pc, #532]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800167e:	2301      	movs	r3, #1
 8001680:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001682:	4b82      	ldr	r3, [pc, #520]	@ (800188c <HAL_RCC_OscConfig+0x4c8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d118      	bne.n	80016c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800168e:	4b7f      	ldr	r3, [pc, #508]	@ (800188c <HAL_RCC_OscConfig+0x4c8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a7e      	ldr	r2, [pc, #504]	@ (800188c <HAL_RCC_OscConfig+0x4c8>)
 8001694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169a:	f7ff fbd3 	bl	8000e44 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a2:	f7ff fbcf 	bl	8000e44 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b64      	cmp	r3, #100	@ 0x64
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e103      	b.n	80018bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b4:	4b75      	ldr	r3, [pc, #468]	@ (800188c <HAL_RCC_OscConfig+0x4c8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x312>
 80016c8:	4b6f      	ldr	r3, [pc, #444]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	4a6e      	ldr	r2, [pc, #440]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6213      	str	r3, [r2, #32]
 80016d4:	e02d      	b.n	8001732 <HAL_RCC_OscConfig+0x36e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x334>
 80016de:	4b6a      	ldr	r3, [pc, #424]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	4a69      	ldr	r2, [pc, #420]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6213      	str	r3, [r2, #32]
 80016ea:	4b67      	ldr	r3, [pc, #412]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	4a66      	ldr	r2, [pc, #408]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	f023 0304 	bic.w	r3, r3, #4
 80016f4:	6213      	str	r3, [r2, #32]
 80016f6:	e01c      	b.n	8001732 <HAL_RCC_OscConfig+0x36e>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b05      	cmp	r3, #5
 80016fe:	d10c      	bne.n	800171a <HAL_RCC_OscConfig+0x356>
 8001700:	4b61      	ldr	r3, [pc, #388]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	4a60      	ldr	r2, [pc, #384]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	6213      	str	r3, [r2, #32]
 800170c:	4b5e      	ldr	r3, [pc, #376]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	4a5d      	ldr	r2, [pc, #372]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6213      	str	r3, [r2, #32]
 8001718:	e00b      	b.n	8001732 <HAL_RCC_OscConfig+0x36e>
 800171a:	4b5b      	ldr	r3, [pc, #364]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	4a5a      	ldr	r2, [pc, #360]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	6213      	str	r3, [r2, #32]
 8001726:	4b58      	ldr	r3, [pc, #352]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	4a57      	ldr	r2, [pc, #348]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	f023 0304 	bic.w	r3, r3, #4
 8001730:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d015      	beq.n	8001766 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173a:	f7ff fb83 	bl	8000e44 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001740:	e00a      	b.n	8001758 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001742:	f7ff fb7f 	bl	8000e44 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001750:	4293      	cmp	r3, r2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e0b1      	b.n	80018bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001758:	4b4b      	ldr	r3, [pc, #300]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0ee      	beq.n	8001742 <HAL_RCC_OscConfig+0x37e>
 8001764:	e014      	b.n	8001790 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001766:	f7ff fb6d 	bl	8000e44 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176c:	e00a      	b.n	8001784 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176e:	f7ff fb69 	bl	8000e44 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800177c:	4293      	cmp	r3, r2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e09b      	b.n	80018bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001784:	4b40      	ldr	r3, [pc, #256]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1ee      	bne.n	800176e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d105      	bne.n	80017a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001796:	4b3c      	ldr	r3, [pc, #240]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	4a3b      	ldr	r2, [pc, #236]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 800179c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 8087 	beq.w	80018ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ac:	4b36      	ldr	r3, [pc, #216]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d061      	beq.n	800187c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d146      	bne.n	800184e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c0:	4b33      	ldr	r3, [pc, #204]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7ff fb3d 	bl	8000e44 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ce:	f7ff fb39 	bl	8000e44 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e06d      	b.n	80018bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e0:	4b29      	ldr	r3, [pc, #164]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f0      	bne.n	80017ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017f4:	d108      	bne.n	8001808 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017f6:	4b24      	ldr	r3, [pc, #144]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	4921      	ldr	r1, [pc, #132]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001808:	4b1f      	ldr	r3, [pc, #124]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a19      	ldr	r1, [r3, #32]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001818:	430b      	orrs	r3, r1
 800181a:	491b      	ldr	r1, [pc, #108]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001820:	4b1b      	ldr	r3, [pc, #108]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 8001822:	2201      	movs	r2, #1
 8001824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001826:	f7ff fb0d 	bl	8000e44 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182e:	f7ff fb09 	bl	8000e44 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e03d      	b.n	80018bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x46a>
 800184c:	e035      	b.n	80018ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <HAL_RCC_OscConfig+0x4cc>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001854:	f7ff faf6 	bl	8000e44 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185c:	f7ff faf2 	bl	8000e44 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e026      	b.n	80018bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186e:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <HAL_RCC_OscConfig+0x4c4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x498>
 800187a:	e01e      	b.n	80018ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d107      	bne.n	8001894 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e019      	b.n	80018bc <HAL_RCC_OscConfig+0x4f8>
 8001888:	40021000 	.word	0x40021000
 800188c:	40007000 	.word	0x40007000
 8001890:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001894:	4b0b      	ldr	r3, [pc, #44]	@ (80018c4 <HAL_RCC_OscConfig+0x500>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d106      	bne.n	80018b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40021000 	.word	0x40021000

080018c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0d0      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d910      	bls.n	800190c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ea:	4b67      	ldr	r3, [pc, #412]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 0207 	bic.w	r2, r3, #7
 80018f2:	4965      	ldr	r1, [pc, #404]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c0>)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fa:	4b63      	ldr	r3, [pc, #396]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d001      	beq.n	800190c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0b8      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d020      	beq.n	800195a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001924:	4b59      	ldr	r3, [pc, #356]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	4a58      	ldr	r2, [pc, #352]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800192e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800193c:	4b53      	ldr	r3, [pc, #332]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4a52      	ldr	r2, [pc, #328]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001946:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001948:	4b50      	ldr	r3, [pc, #320]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	494d      	ldr	r1, [pc, #308]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	4313      	orrs	r3, r2
 8001958:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d040      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d107      	bne.n	800197e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	4b47      	ldr	r3, [pc, #284]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d115      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e07f      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d107      	bne.n	8001996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001986:	4b41      	ldr	r3, [pc, #260]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d109      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e073      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001996:	4b3d      	ldr	r3, [pc, #244]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e06b      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019a6:	4b39      	ldr	r3, [pc, #228]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f023 0203 	bic.w	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	4936      	ldr	r1, [pc, #216]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b8:	f7ff fa44 	bl	8000e44 <HAL_GetTick>
 80019bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019be:	e00a      	b.n	80019d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c0:	f7ff fa40 	bl	8000e44 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e053      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 020c 	and.w	r2, r3, #12
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d1eb      	bne.n	80019c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019e8:	4b27      	ldr	r3, [pc, #156]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d210      	bcs.n	8001a18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b24      	ldr	r3, [pc, #144]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 0207 	bic.w	r2, r3, #7
 80019fe:	4922      	ldr	r1, [pc, #136]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c0>)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b20      	ldr	r3, [pc, #128]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e032      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d008      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a24:	4b19      	ldr	r3, [pc, #100]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	4916      	ldr	r1, [pc, #88]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d009      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a42:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	490e      	ldr	r1, [pc, #56]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a56:	f000 f821 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	490a      	ldr	r1, [pc, #40]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 8001a68:	5ccb      	ldrb	r3, [r1, r3]
 8001a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6e:	4a09      	ldr	r2, [pc, #36]	@ (8001a94 <HAL_RCC_ClockConfig+0x1cc>)
 8001a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a72:	4b09      	ldr	r3, [pc, #36]	@ (8001a98 <HAL_RCC_ClockConfig+0x1d0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff f9a2 	bl	8000dc0 <HAL_InitTick>

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40022000 	.word	0x40022000
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	08001bf0 	.word	0x08001bf0
 8001a94:	2000000c 	.word	0x2000000c
 8001a98:	20000010 	.word	0x20000010

08001a9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d002      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x30>
 8001ac6:	2b08      	cmp	r3, #8
 8001ac8:	d003      	beq.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x36>
 8001aca:	e027      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001acc:	4b19      	ldr	r3, [pc, #100]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ace:	613b      	str	r3, [r7, #16]
      break;
 8001ad0:	e027      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	0c9b      	lsrs	r3, r3, #18
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	4a17      	ldr	r2, [pc, #92]	@ (8001b38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001adc:	5cd3      	ldrb	r3, [r2, r3]
 8001ade:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d010      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aea:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x94>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	0c5b      	lsrs	r3, r3, #17
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	4a11      	ldr	r2, [pc, #68]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001af6:	5cd3      	ldrb	r3, [r2, r3]
 8001af8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001afe:	fb03 f202 	mul.w	r2, r3, r2
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	e004      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b10:	fb02 f303 	mul.w	r3, r2, r3
 8001b14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	613b      	str	r3, [r7, #16]
      break;
 8001b1a:	e002      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b1c:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b1e:	613b      	str	r3, [r7, #16]
      break;
 8001b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b22:	693b      	ldr	r3, [r7, #16]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	371c      	adds	r7, #28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000
 8001b34:	007a1200 	.word	0x007a1200
 8001b38:	08001c00 	.word	0x08001c00
 8001b3c:	08001c10 	.word	0x08001c10
 8001b40:	003d0900 	.word	0x003d0900

08001b44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b78 <RCC_Delay+0x34>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <RCC_Delay+0x38>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	0a5b      	lsrs	r3, r3, #9
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b60:	bf00      	nop
  }
  while (Delay --);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1e5a      	subs	r2, r3, #1
 8001b66:	60fa      	str	r2, [r7, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f9      	bne.n	8001b60 <RCC_Delay+0x1c>
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	2000000c 	.word	0x2000000c
 8001b7c:	10624dd3 	.word	0x10624dd3

08001b80 <memset>:
 8001b80:	4603      	mov	r3, r0
 8001b82:	4402      	add	r2, r0
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d100      	bne.n	8001b8a <memset+0xa>
 8001b88:	4770      	bx	lr
 8001b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8001b8e:	e7f9      	b.n	8001b84 <memset+0x4>

08001b90 <__libc_init_array>:
 8001b90:	b570      	push	{r4, r5, r6, lr}
 8001b92:	2600      	movs	r6, #0
 8001b94:	4d0c      	ldr	r5, [pc, #48]	@ (8001bc8 <__libc_init_array+0x38>)
 8001b96:	4c0d      	ldr	r4, [pc, #52]	@ (8001bcc <__libc_init_array+0x3c>)
 8001b98:	1b64      	subs	r4, r4, r5
 8001b9a:	10a4      	asrs	r4, r4, #2
 8001b9c:	42a6      	cmp	r6, r4
 8001b9e:	d109      	bne.n	8001bb4 <__libc_init_array+0x24>
 8001ba0:	f000 f81a 	bl	8001bd8 <_init>
 8001ba4:	2600      	movs	r6, #0
 8001ba6:	4d0a      	ldr	r5, [pc, #40]	@ (8001bd0 <__libc_init_array+0x40>)
 8001ba8:	4c0a      	ldr	r4, [pc, #40]	@ (8001bd4 <__libc_init_array+0x44>)
 8001baa:	1b64      	subs	r4, r4, r5
 8001bac:	10a4      	asrs	r4, r4, #2
 8001bae:	42a6      	cmp	r6, r4
 8001bb0:	d105      	bne.n	8001bbe <__libc_init_array+0x2e>
 8001bb2:	bd70      	pop	{r4, r5, r6, pc}
 8001bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bb8:	4798      	blx	r3
 8001bba:	3601      	adds	r6, #1
 8001bbc:	e7ee      	b.n	8001b9c <__libc_init_array+0xc>
 8001bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bc2:	4798      	blx	r3
 8001bc4:	3601      	adds	r6, #1
 8001bc6:	e7f2      	b.n	8001bae <__libc_init_array+0x1e>
 8001bc8:	08001c14 	.word	0x08001c14
 8001bcc:	08001c14 	.word	0x08001c14
 8001bd0:	08001c14 	.word	0x08001c14
 8001bd4:	08001c18 	.word	0x08001c18

08001bd8 <_init>:
 8001bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bda:	bf00      	nop
 8001bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bde:	bc08      	pop	{r3}
 8001be0:	469e      	mov	lr, r3
 8001be2:	4770      	bx	lr

08001be4 <_fini>:
 8001be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be6:	bf00      	nop
 8001be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bea:	bc08      	pop	{r3}
 8001bec:	469e      	mov	lr, r3
 8001bee:	4770      	bx	lr
